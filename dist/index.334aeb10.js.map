{"mappings":"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","sources":["<anon>","src/js/main.js","src/js/modules/game.js","src/js/modules/cards.js"],"sourcesContent":["class $4489101ff206cba2$export$60332b2344f7fe41 {\n    constructor(id, frontImgSrc, frontAlt){\n        this.id = id;\n        this.className = \"card\";\n        this.frontImgSrc = frontImgSrc;\n        this.isFlipped = false;\n        this.backImgSrc = \"images/back.svg\";\n        this.frontAlt = frontAlt;\n        this.backAlt = \"back-face\";\n        this.frontClass = \"front-face\";\n        this.backClass = \"back-face\";\n    }\n    flip() {\n        this.isFlipped = !this.isFlipped;\n    }\n}\n\n\nclass $99b67f831e821467$export$985739bfa5723e08 {\n    constructor(){\n        this.cards = [\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(1, \"images/image1.svg\", \"panda\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(2, \"images/image2.svg\", \"giraffe\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(3, \"images/image3.svg\", \"elephant\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(4, \"images/image4.svg\", \"zebra\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(5, \"images/image1.svg\", \"panda\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(6, \"images/image2.svg\", \"giraffe\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(7, \"images/image3.svg\", \"elephant\"),\n            new (0, $4489101ff206cba2$export$60332b2344f7fe41)(8, \"images/image4.svg\", \"zebra\")\n        ];\n        console.log(this.cards);\n        this.numClickedCards = 0;\n        this.numMatchedCards = 0;\n        this.board = document.querySelector(\"#board\");\n        this.hasFlippedCard = false;\n        this.firstCard = null;\n        this.secondCard = null;\n    }\n    resetBoard() {\n        this.hasFlippedCard = false;\n        this.firstCard = null;\n        this.secondCard = null;\n    }\n    start() {\n        console.log(\"start game\");\n        this.renderBoard();\n    }\n    checkForMatch() {\n        this.numClickedCards = 0;\n        if (this.firstCard?.frontAlt === this.secondCard?.frontAlt) {\n            this.numMatchedCards += 2;\n            if (this.numMatchedCards === this.cards.length) window.alert(\"Congratulations! You Won!\");\n        } else setTimeout(()=>{\n            this.unflipCards();\n        }, 800);\n    }\n    flipCard(e) {\n        const card = e.target.parentNode;\n        console.log(\"card\", card);\n        console.log(\"first card\", this.firstCard);\n        console.log(\"second card\", this.secondCard);\n        if (card === this.firstCard) return;\n        console.log(\"id\", e.target.parentNode.id);\n        const cardInClass = this.cards.find((c)=>c.id === parseInt(e.target.parentNode.id));\n        console.log(\"cardInClass\", cardInClass);\n        this.numClickedCards += 1;\n        console.log(\"is flipped\", cardInClass.isFlipped);\n        console.log(\"numClickedCards\", this.numClickedCards);\n        if (!cardInClass.isFlipped && this.numClickedCards === 1) {\n            this.firstCard = cardInClass;\n            this.firstCard.isFlipped = true;\n            console.log(\"firstcard\", this.firstCard);\n        } else if (!cardInClass.isFlipped && this.numClickedCards === 2) {\n            this.secondCard = cardInClass;\n            this.secondCard.isFlipped = true;\n            console.log(\"secondcard\", this.secondCard);\n            const card1Front = document.querySelector(`#front-${this.firstCard?.id}`);\n            const card1Back = document.querySelector(`#back-${this.firstCard?.id}`);\n            const card2Front = document.querySelector(`#front-${this.secondCard?.id}`);\n            const card2Back = document.querySelector(`#back-${this.secondCard?.id}`);\n            console.log(\"card1Front\", card1Front);\n            console.log(\"card1Back\", card1Back);\n            console.log(\"card2Front\", card2Front);\n            console.log(\"card2Back\", card2Back);\n            card1Front?.classList.add(\"show\");\n            card1Back?.classList.remove(\"show\");\n            card2Front?.classList.add(\"show\");\n            card2Back?.classList.remove(\"show\");\n            this.checkForMatch();\n        }\n    }\n    renderBoard() {\n        console.log(\"render board\");\n        console.log(\"board\", this.board);\n        this.board.innerHTML = \"\";\n        this.cards.forEach((card)=>{\n            const cardDiv = document.createElement(\"div\");\n            cardDiv.classList.add(card.className);\n            cardDiv.id = card.id;\n            const frontImg = document.createElement(\"img\");\n            frontImg.classList.add(card.frontClass);\n            frontImg.id = `front-${card.id}`;\n            frontImg.src = card.frontImgSrc;\n            frontImg.alt = card.frontAlt;\n            const backImg = document.createElement(\"img\");\n            backImg.classList.add(card.backClass);\n            backImg.id = `back-${card.id}`;\n            backImg.classList.add(\"show\");\n            backImg.src = card.backImgSrc;\n            backImg.alt = card.backAlt;\n            cardDiv.appendChild(frontImg);\n            cardDiv.appendChild(backImg);\n            this.board.appendChild(cardDiv);\n        });\n        const cardElements = document.querySelectorAll(\".card\");\n        cardElements.forEach((card)=>card.addEventListener(\"click\", this.flipCard.bind(this)));\n    }\n    unflipCards() {\n        console.log(\"unflipCards\");\n        const card1Front = document.querySelector(`#front-${this.firstCard?.id}`);\n        const card1Back = document.querySelector(`#back-${this.firstCard?.id}`);\n        const card2Front = document.querySelector(`#front-${this.secondCard?.id}`);\n        const card2Back = document.querySelector(`#back-${this.secondCard?.id}`);\n        card1Front?.classList.remove(\"show\");\n        card1Back?.classList.add(\"show\");\n        card2Front?.classList.remove(\"show\");\n        card2Back?.classList.add(\"show\");\n        console.log(\"card1Front\", card1Front);\n        console.log(\"card1Back\", card1Back);\n        console.log(\"card2Front\", card2Front);\n        console.log(\"card2Back\", card2Back);\n        const card1InClass = this.cards.find((c)=>c.id === this.firstCard?.id);\n        const card2InClass = this.cards.find((c)=>c.id === this.secondCard?.id);\n        card1InClass.isFlipped = false;\n        card2InClass.isFlipped = false;\n        console.log(\"card1\", card1InClass);\n        console.log(\"card2\", card2InClass);\n    }\n}\n\n\nconst $54b47fc030b7b21e$var$game = new (0, $99b67f831e821467$export$985739bfa5723e08)();\n$54b47fc030b7b21e$var$game.start();\nconst $54b47fc030b7b21e$var$restartButton = document.getElementById(\"restart-button\");\n$54b47fc030b7b21e$var$restartButton.addEventListener(\"click\", ()=>{\n    location.reload();\n});\n\n\n//# sourceMappingURL=index.334aeb10.js.map\n","\nimport { Game } from './modules/game.js'; \n\n\nconst game = new Game();\n\ngame.start();\n\nconst restartButton = document.getElementById('restart-button');\nrestartButton.addEventListener('click', () => {\n    location.reload();\n});","import { Card } from './cards.js' \nexport class Game {\n    constructor() {\n        this.cards = [\n            new Card(1, \"images/image1.svg\", \"panda\"),\n            new Card(2, \"images/image2.svg\", \"giraffe\"),\n            new Card(3, \"images/image3.svg\", \"elephant\"),\n            new Card(4, \"images/image4.svg\", \"zebra\"),\n            new Card(5, \"images/image1.svg\", \"panda\"),\n            new Card(6, \"images/image2.svg\", \"giraffe\"),\n            new Card(7, \"images/image3.svg\", \"elephant\"),\n            new Card(8, \"images/image4.svg\", \"zebra\"),\n        ]\n        console.log(this.cards)\n        this.numClickedCards = 0;\n        this.numMatchedCards = 0;\n        this.board = document.querySelector('#board')\n        this.hasFlippedCard = false\n        this.firstCard = null;\n        this.secondCard = null;\n      \n\n    }\n\n\n    resetBoard() {\n        this.hasFlippedCard = false;\n        this.firstCard = null;\n        this.secondCard = null;\n    }\n  \n    start() {\n        console.log('start game');\n        this.renderBoard();\n    }\n\n    checkForMatch() {\n        this.numClickedCards = 0;\n        if (this.firstCard?.frontAlt === this.secondCard?.frontAlt) {\n            this.numMatchedCards += 2;\n         \n            if (this.numMatchedCards === this.cards.length) { \n                window.alert(\"Congratulations! You Won!\"); \n            }\n        } else {\n            setTimeout(() => {\n                this.unflipCards();\n            }, 800);\n        }\n    }\n    \n    \n\n    flipCard(e) {\n        const card = e.target.parentNode; \n        console.log('card', card)\n        console.log('first card', this.firstCard)\n        console.log('second card', this.secondCard)\n        if ( card === this.firstCard) return\n        console.log('id', e.target.parentNode.id)\n        const cardInClass = this.cards.find(c => c.id === parseInt(e.target.parentNode.id));\n        console.log('cardInClass', cardInClass)\n        this.numClickedCards += 1;\n        console.log('is flipped', cardInClass.isFlipped)\n        console.log('numClickedCards', this.numClickedCards)\n        if (!cardInClass.isFlipped && this.numClickedCards === 1) {\n            this.firstCard = cardInClass;\n            this.firstCard.isFlipped = true;\n            console.log('firstcard', this.firstCard)\n        } else if (!cardInClass.isFlipped && this.numClickedCards === 2) {\n            this.secondCard = cardInClass;\n            this.secondCard.isFlipped = true;\n            console.log('secondcard', this.secondCard);\n            \n\n            const card1Front = document.querySelector(`#front-${this.firstCard?.id}`)\n            const card1Back = document.querySelector(`#back-${this.firstCard?.id}`)\n            const card2Front = document.querySelector(`#front-${this.secondCard?.id}`)\n            const card2Back = document.querySelector(`#back-${this.secondCard?.id}`)\n            console.log('card1Front', card1Front)\n            console.log('card1Back', card1Back)\n            console.log('card2Front', card2Front)\n            console.log('card2Back', card2Back)\n\n            card1Front?.classList.add('show');\n            card1Back?.classList.remove('show');\n            card2Front?.classList.add('show');\n            card2Back?.classList.remove('show');\n            this.checkForMatch();\n        }\n    }\n  \n    renderBoard() {\n        console.log('render board');\n        console.log('board', this.board);\n        this.board.innerHTML = '';\n        this.cards.forEach(card => {\n            const cardDiv = document.createElement('div');\n            cardDiv.classList.add(card.className);\n            cardDiv.id = card.id\n    \n            const frontImg = document.createElement('img');\n            frontImg.classList.add(card.frontClass);\n            frontImg.id = `front-${card.id}`;\n            frontImg.src = card.frontImgSrc;\n            frontImg.alt = card.frontAlt;\n    \n            const backImg = document.createElement('img');\n            backImg.classList.add(card.backClass);\n            backImg.id = `back-${card.id}`;\n            backImg.classList.add('show');\n            backImg.src = card.backImgSrc;\n            backImg.alt = card.backAlt;\n    \n            cardDiv.appendChild(frontImg);\n            cardDiv.appendChild(backImg);\n            this.board.appendChild(cardDiv);\n        });\n\n        const cardElements = document.querySelectorAll('.card');\n        cardElements.forEach(card => card.addEventListener('click', this.flipCard.bind(this)));   \n    }\n\n   \n    unflipCards() {\n        console.log('unflipCards')\n        const card1Front = document.querySelector(`#front-${this.firstCard?.id}`)\n        const card1Back = document.querySelector(`#back-${this.firstCard?.id}`)\n        const card2Front = document.querySelector(`#front-${this.secondCard?.id}`)\n        const card2Back = document.querySelector(`#back-${this.secondCard?.id}`)\n        card1Front?.classList.remove('show');\n        card1Back?.classList.add('show');\n        card2Front?.classList.remove('show');\n        card2Back?.classList.add('show');\n        console.log('card1Front', card1Front)\n        console.log('card1Back', card1Back)\n        console.log('card2Front', card2Front)\n        console.log('card2Back', card2Back)\n\n        const card1InClass = this.cards.find(c => c.id === this.firstCard?.id); \n        const card2InClass = this.cards.find(c => c.id === this.secondCard?.id); \n        card1InClass.isFlipped = false;\n        card2InClass.isFlipped = false;\n        console.log('card1', card1InClass)\n        console.log('card2', card2InClass)\n    }\n}","export class Card {\n    constructor(id, frontImgSrc, frontAlt) {\n        this.id = id;\n        this.className = \"card\";\n        this.frontImgSrc = frontImgSrc;\n        this.isFlipped = false;\n        this.backImgSrc = \"images/back.svg\";\n        this.frontAlt = frontAlt;\n        this.backAlt = \"back-face\";\n        this.frontClass = \"front-face\";\n        this.backClass = \"back-face\";\n    }\n\n    flip() {\n        this.isFlipped = !this.isFlipped;\n    }\n    \n}\n"],"names":["$4489101ff206cba2$export$60332b2344f7fe41","constructor","id","frontImgSrc","frontAlt","className","isFlipped","backImgSrc","backAlt","frontClass","backClass","flip","$54b47fc030b7b21e$var$game","cards","console","log","numClickedCards","numMatchedCards","board","document","querySelector","hasFlippedCard","firstCard","secondCard","resetBoard","start","renderBoard","checkForMatch","length","window","alert","setTimeout","unflipCards","flipCard","e","card","target","parentNode","cardInClass","find","c","parseInt","card1Front","card1Back","card2Front","card2Back","classList","add","remove","innerHTML","forEach","cardDiv","createElement","frontImg","src","alt","backImg","appendChild","cardElements","querySelectorAll","addEventListener","bind","card1InClass","card2InClass","$54b47fc030b7b21e$var$restartButton","getElementById","location","reload"],"version":3,"file":"index.334aeb10.js.map"}